# Kubelens Parent Chart Values
# This chart only includes sub-charts (server and app)
# No resources are created directly by this chart

# Global settings (inherited by sub-charts)
global:
  imagePullSecrets: []

# Dex sub-chart configuration (OAuth2 provider)
# Using official Dex Helm chart from https://github.com/dexidp/helm-charts
dex:
  enabled: true
  replicaCount: 1
  
  image:
    repository: ghcr.io/dexidp/dex
    tag: v2.37.0
    pullPolicy: IfNotPresent
  
  # Service configuration
  service:
    type: ClusterIP
    ports:
      http:
        port: 5556
      grpc:
        port: 5557
      telemetry:
        port: 5558
  
  # Resources
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Environment variables for Google OAuth2 credentials
  # IMPORTANT: Set these via --set or external secrets in production
  envVars:
    - name: GOOGLE_CLIENT_ID
      value: ""  # Set via: --set dex.envVars[0].value=YOUR_CLIENT_ID
    - name: GOOGLE_CLIENT_SECRET
      value: ""  # Set via: --set dex.envVars[1].value=YOUR_CLIENT_SECRET
  
  # Dex configuration
  config:
    issuer: http://dex:5556/dex
    
    storage:
      type: kubernetes
      config:
        inCluster: true
    
    web:
      http: 0.0.0.0:5556
    
    grpc:
      addr: 0.0.0.0:5557
    
    telemetry:
      http: 0.0.0.0:5558
    
    staticClients:
      - id: kubelens
        redirectURIs:
          - 'http://localhost/auth/callback'
        name: 'Kubelens'
        secret: kubelens-secret-change-in-production
    
    connectors:
      - type: google
        id: google
        name: Google
        config:
          clientID: $GOOGLE_CLIENT_ID
          clientSecret: $GOOGLE_CLIENT_SECRET
          redirectURI: http://dex:5556/dex/callback
          scopes:
            - profile
            - email
            - openid
            - https://www.googleapis.com/auth/cloud-platform.read-only

# Server sub-chart configuration
server:
  enabled: true
  replicaCount: 1
  
  image:
    repository: kubelensai/kubelens-server
    pullPolicy: Always
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 8080
  
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  
  rbac:
    create: true
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  env:
    - name: PORT
      value: "8080"
    - name: LOG_LEVEL
      value: "info"
    - name: DATABASE_PATH
      value: "/data/kubelens.db"
  
  persistence:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 1Gi
  
  podAnnotations: {}
  
  podSecurityContext:
    fsGroup: 2000
  
  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 1000
  
  nodeSelector: {}
  tolerations: []
  affinity: {}

# App sub-chart configuration
app:
  enabled: true
  replicaCount: 1
  
  image:
    repository: kubelensai/kubelens-app
    pullPolicy: Always
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 80
  
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # cert-manager.io/cluster-issuer: letsencrypt-prod
      # nginx.ingress.kubernetes.io/ssl-redirect: "true"
    hosts:
      - host: kubelens.app
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: kubelens-app-secret
        hosts:
          - kubelens.app
  
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi
  
  env:
    # API Server URL - auto-configured to point to server service
    apiServer: ""  # Will be set to http://<release-name>-server:8080
    extra: {}
  
  # Server service configuration for app to connect
  server:
    serviceName: ""  # Auto-detected from Release.Name
    servicePort: 8080
  
  podAnnotations: {}
  podSecurityContext: {}
  
  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 1000
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
